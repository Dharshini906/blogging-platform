// server.js
const express = require('express'); const mongoose = require('mongoose'); const dotenv = require('dotenv');
const blogRoutes = require('./routes/blogRoutes');

// 1. Configuration
dotenv.config(); // Load environment variables from .env

const app = express();
const PORT = process.env.PORT || 3000;
const DB_URI = process.env.DB_URI || 'mongodb://localhost/blogDB';

// 2. Database Connection mongoose.connect(DB_URI)
.then(() => console.log('MongoDB connected successfully!'))
.catch(err => {
console.error('MongoDB connection error:', err); process.exit(1); // Exit process with failure
});

// 3. Middleware
app.use(express.urlencoded({ extended: true })); // Parse URL-encoded bodies app.use(express.json()); // Parse JSON bodies
app.use(express.static('public')); // Serve static files

// 4. Templating Engine Setup (Example: EJS) app.set('view engine', 'ejs');
app.set('views', './views');



                                                                                 
// 5. Routes
// Example: Main page app.get('/', (req, res) => {
// Logic to fetch recent posts and render the homepage view res.render('index', { title: 'Welcome to the IBM Node.js Blog' });
});
// Blog CRUD routes app.use('/posts', blogRoutes);

// 6. Error Handling (Basic) app.use((req, res, next) => {
res.status(404).render('404', { title: '404 - Page Not Found' });
});

// 7. Start Server app.listen(PORT, () => {
console.log(`Server is running on http://localhost:${PORT}`);
});
